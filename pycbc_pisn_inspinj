#!/usr/bin/env python
# Copyright (C) 2017 Christopher M. Biwer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
""" Draws from distributions.
"""

import os
import argparse
from glue.ligolw import lsctables
from glue.ligolw import utils
import h5py
import logging
import numpy
import pycbc
from pisn import sim_xml
from pycbc.cosmology import redshift
from pycbc import detector
from pycbc import distributions
from pycbc import fft
from pycbc import filter as _filter
from pycbc import inference
from pycbc import inject
from pycbc import pnutils
from pycbc import psd as _psd
from pycbc import strain as _strain
from pycbc import transforms
from pycbc import types
from pycbc import waveform
from pycbc.workflow import WorkflowConfigParser

def convert_liststring_to_list(lstring):
    """ Checks if an argument of the configuration file is a string of a list
    and returns the corresponding list (of strings)
    """
    if lstring[0] == "[" and lstring[-1] == "]":
        lvalue = [str(lstring[1:-1].split(",")[n].strip().strip("'"))
                      for n in range(len(lstring[1:-1].split(",")))]
    return lvalue

def pad_timeseries_to_integer_length(timeseries, sample_rate):
    """ This function zero pads a time series so that its length is an integer
    multiple of the sampling rate.

    Padding is adding symmetically to the start and end of the time series.
    If the number of samples to pad is odd then the end zero padding will have
    one more sample than the start zero padding.
    """

    # calculate how many sample points needed to pad to get
    # integer second time series
    remainder = sample_rate - len(timeseries) % sample_rate
    start_pad = int(remainder / 2)
    end_pad = int(remainder - start_pad)

    # make arrays of zeroes
    start_array = numpy.zeros(start_pad)
    end_array = numpy.zeros(end_pad)

    # pad waveform with arrays of zeroes
    initial_array = numpy.concatenate([start_array,timeseries,end_array])
    return types.TimeSeries(initial_array, delta_t=timeseries.delta_t,
                            epoch=timeseries.start_time,
                            dtype=timeseries.dtype)

# command line usage
parser = argparse.ArgumentParser(usage=__file__ + " [--options]",
                                 description=__doc__)

# add data options
parser.add_argument("--seed", type=int, default=0,
                    help="Random seed.")
parser.add_argument("--instruments", type=str, nargs="+", required=True,
                    help="IFOs, eg. H1 L1.")
parser.add_argument("--ninjections", type=int, default=0,
                    help="Number of injections to draw parameters.")

# add config options
parser.add_argument("--config-files", type=str, nargs="+", required=True,
                    help="A file parsable by "
                         "pycbc.workflow.WorkflowConfigParser.")
parser.add_argument("--config-overrides", type=str, nargs="+", default=None,
                    metavar="SECTION:OPTION:VALUE",
                    help="List of section:option:value combinations to add "
                         "into the configuration file.")
parser.add_argument("--injection-config-file", type=str, required=True,
                    help="A file parsable by "
                         "pycbc.workflow.WorkflowConfigParser.")

# output options
parser.add_argument("--output-file", type=str, required=True,
                    help="Output file path.")
parser.add_argument("--force", action="store_true", default=False,
                    help="If the output-file already exists, overwrite it. "
                         "Otherwise, an OSError is raised.")

# data conditioning options
#! FIXME: add sanity check
parser.add_argument("--psd-low-frequency-cutoff", type=float, default=None,
                    help="Frequency to begin generating the PSD in Hz. This "
                         "is the start frequency of the SNR calculation.")
parser.add_argument("--psd-high-frequency-cutoff", type=float, default=None,
                    help="Upper frequency to terminate the SNR "
                         "calculation. Default will be Nyquist frequency, "
                         "ie. int(sample_rate/2).")
parser.add_argument("--low-frequency-cutoff", type=float,
                  help="The low frequency cutoff to use for filtering (Hz).")
 
# verbose option
parser.add_argument("--verbose", action="store_true", default=False,
                    help="Print logging messages.")

# add option groups
fft.insert_fft_option_group(parser)
_strain.insert_strain_option_group_multi_ifo(parser)
_psd.insert_psd_option_group_multi_ifo(parser)

# parse command line
opts = parser.parse_args()

# verify options are sane if using strain options
if opts.psd_estimation:
    _strain.verify_strain_options_multi_ifo(opts, parser, opts.instruments)
if not opts.psd_estimation and (opts.frame_files or opts.frame_type
                            or opts.frame_cache or opts.fake_strain):
    raise KeyError("Must use --psd-estimation with frame options"
                   "(--frame-files, --frame-type, --frame-cache, "
                   "and --fake-strain).")

# check for the output file
if os.path.exists(opts.output_file) and not opts.force:
    raise OSError("output-file already exists; use --force if you wish to "
                  "overwrite it.")

# check that sample rates are the same
for ifo in opts.instruments:
    if opts.sample_rate[ifo] != opts.sample_rate[opts.instruments[0]]:
        logging.warn('Sample rates must be equal for all IFOs.')
        sys.exit()
sample_rate = opts.sample_rate[opts.instruments[0]]

# setup log
pycbc.init_logging(opts.verbose)

# set the seed
numpy.random.seed(opts.seed)
logging.info("Using seed %i", opts.seed)

# read configuration file
logging.info("Reading configuration file")
if opts.config_overrides is not None:
    overrides = [override.split(":") for override in opts.config_overrides]
else:
    overrides = None
# FIXME this overwrites inference config file that gets handed in by workflow
opts.config_files = [opts.injection_config_file]
cp = WorkflowConfigParser(opts.config_files, overrides)
# get transforms and constraints from config
transforms = transforms.read_transforms_from_config(
                 cp, section="sampling_transforms")
constraints = distributions.read_constraints_from_config(
                 cp, transforms=transforms)

# sanity check that each parameter in [variable_args] has a priors section
variable_args = cp.options("variable_args")
subsections = cp.get_subsections("prior")
tags = numpy.concatenate([tag.split("+") for tag in subsections])
if not any(param in tags for param in variable_args):
    raise KeyError("You are missing a priors section in the config file.")

# get parameters that do not change in sampler
static_args = dict([(key, cp.get_opt_tags("static_args", key, []))
                    for key in cp.options("static_args")])
for key, val in static_args.iteritems():
    try:
        static_args[key] = float(val)
        continue
    except:
        pass
    try:
        static_args[key] = convert_liststring_to_list(val) 
    except:
        pass

# get prior distribution for each variable parameter
logging.info("Setting up priors for each parameter")
dists = distributions.read_distributions_from_config(cp, "prior")

# draw samples
#! FIXME: could probably just use dist_samples instead of casting it as dict
#samples = {}
dists_list = []
varargs_list = []
for dist in dists:
    #dist_samples = dist.rvs(size=opts.ninjections)
    for param in dist.params:
        #samples[param] = dist_samples[param]
        varargs_list.append(param)
        dists_list.append(dist)
jdist = distributions.JointDistribution(
            varargs_list, *dists_list, **{"constraints": constraints})
logging.info("Drawing samples")
jdist_samples = jdist.rvs(size=opts.ninjections)
samples = {}
for i, p in enumerate(jdist.variable_args):
    samples[p] = numpy.array([a[i] for a in jdist_samples])
# convert masses to detector frame
for p in ['mass1', 'mass2']:
    samples[p] *= 1. + redshift(samples['distance'])

# get Detector for each IFO
dets = dict([(ifo, detector.Detector(ifo)) for ifo in opts.instruments])

# construct waveform string that can be parsed by LALSimulation
if "waveform" in static_args.keys():
    name, phase_order = inject.legacy_approximant_name(static_args["waveform"])
else:
    raise ValueError("Must provide waveform as static parameter")

# create output XML file and append a SimInspiralTable
logging.info("Creating XML file")
outdoc = sim_xml.empty_ligolw_document(opts)
sim_table = lsctables.New(lsctables.SimInspiralTable,
                          columns=lsctables.SimInspiralTable.validcolumns)
outdoc.childNodes[0].appendChild(sim_table)

# set upper frequency cutoff if not given
if opts.psd_high_frequency_cutoff:
    f_high = opts.psd_high_frequency_cutoff
else:
    f_high = int(sample_rate / 2)

# get strain time series
# strain is used to estimate a PSD so if user supplies PSD
# then genreate a zeroNoise TimeSeries to get length, delta_f, etc.
if not opts.psd_estimation:
    opts.fake_strain = "zeroNoise"
strain_dict = _strain.from_cli_multi_ifos(opts, opts.instruments,
                                          dyn_range_fac=pycbc.DYN_RANGE_FAC)

#! FIXME: only do this if rescaling SNR
# organize options for multi-IFO PSD
# if not generating strain then set those related options to None
stilde_dict = {}
length_dict = {}
delta_f_dict = {}
low_frequency_cutoff_dict = {}
for ifo in opts.instruments:
    stilde_dict[ifo] = strain_dict[ifo].to_frequencyseries()
    length_dict[ifo] = len(stilde_dict[ifo])
    delta_f_dict[ifo] = stilde_dict[ifo].delta_f
    low_frequency_cutoff_dict[ifo] = opts.psd_low_frequency_cutoff

# get PSD
logging.info('Generating PSDs')
psd_dict = _psd.from_cli_multi_ifos(
                              opts, length_dict, delta_f_dict,
                              low_frequency_cutoff_dict, opts.instruments,
                              strain_dict=strain_dict,
                              dyn_range_factor=pycbc.DYN_RANGE_FAC,
                              precision="double")

# loop over injections
for i in range(opts.ninjections):

    # get SimInspiral and set simulation_id
    sim = sim_xml.empty_sim_inspiral(i)

    # fill in SimInspiral columns with variable parameters
    for key in samples.keys():
        sim_xml.parse_to_column(sim, key, samples[key][i])

    # fill in SimInspiral columns with static parameters
    for key, val in static_args.iteritems():
        sim_xml.parse_to_column(sim, key, val)

    # add mass1 and mass2 columns
    if "q" in static_args.keys() or "q" in samples.keys():
        mchirp = static_args["mchirp"] \
                    if "mchirp" in static_args.keys() else samples["mchirp"][i]
        q = static_args["q"] if "q" in static_args.keys() else samples["q"][i]
        sim.mass1, sim.mass2 = pnutils.mchirp_q_to_mass1_mass2(mchirp, q)
        _, sim.eta = pnutils.mass1_mass2_to_mchirp_eta(sim.mass1, sim.mass2)
    else:
        sim.mchirp, sim.eta = pnutils.mass1_mass2_to_mchirp_eta(sim.mass1, sim.mass2)

    # add ra and dec
    if "ra" in static_args.keys() or "ra" in samples.keys():
        ra = static_args["ra"] if "ra" in static_args.keys() else samples["ra"][i]
        dec = static_args["dec"] if "dec" in static_args.keys() else samples["dec"][i]
        sim.longitude = ra
        sim.latitude = dec

    # add coalescence time columns
    if "tc" in static_args.keys() or "tc" in samples.keys():
        tc = static_args["tc"] if "tc" in static_args.keys() else samples["tc"][i]
        sim.geocent_end_time = int(tc)
        sim.geocent_end_time_ns = int(tc % 1 * 1e9)

    # if user wants a specific network SNR then rescale the distance
    stat_key = "network_snr"
    if stat_key in samples.keys() or stat_key in static_args.keys():
        if stat_key in samples.keys():
            target_stat = samples[stat_key][i]
        else:
            target_stat = static_args[stat_key]
        network_snr = 0

        # generate waveform
        #! FIXME: use a generator probably so does not have to be TD
        logging.info("Generating waveform at %.3fMpc beginning at %.3fHz for "
                     "SNR calculation", sim.distance,
                     opts.psd_low_frequency_cutoff)
        h_plus, h_cross = waveform.get_td_waveform(
                                sim, approximant=name, phase_order=phase_order,
                                f_lower=opts.psd_low_frequency_cutoff,
                                delta_t=1.0 / sample_rate)

        # zero pad to get integer second time series
        h_plus = pad_timeseries_to_integer_length(h_plus, sample_rate)
        h_cross = pad_timeseries_to_integer_length(h_cross, sample_rate)

        # loop over Detectors
        for ifo, det in dets.iteritems():

            # get time delay to interferometer from center of the Earth
            geocent_end_time = sim.geocent_end_time + sim.geocent_end_time_ns
            time_delay = det.time_delay_from_earth_center(sim.longitude,
                                                          sim.latitude,
                                                          geocent_end_time)
            end_time = geocent_end_time + time_delay

            # get antenna pattern
            f_plus, f_cross = det.antenna_pattern(sim.longitude, sim.latitude,
                                                  sim.polarization,
                                                  geocent_end_time)

            # calculate strain
            logging.info("Calculating strain for %s", ifo)
            strain = f_plus * h_plus + f_cross * h_cross

            # taper waveform
            logging.info("Tapering strain for %s", ifo)
            strain = waveform.taper_timeseries(strain, tapermethod=sim.taper)

            # FFT strain
            logging.info("FFT strain for %s", ifo)
            strain_tilde = _filter.make_frequency_series(strain)

            # interpolate PSD to waveform delta_f
            if psd_dict[ifo].delta_f != strain_tilde.delta_f:
                logging.info("Interpolating PSD for %s from %fHz to %fHz",
                             ifo, psd_dict[ifo].delta_f, strain_tilde.delta_f)
                psd_dict[ifo] = _psd.interpolate(
                                           psd_dict[ifo], strain_tilde.delta_f)

            # calculate sigma-squared SNR
            logging.info("Calculating sigma for %s", ifo)
            sigma_squared = _filter.sigmasq(
                            pycbc.DYN_RANGE_FAC * strain_tilde,
                            psd=psd_dict[ifo],
                            low_frequency_cutoff=opts.psd_low_frequency_cutoff,
                            high_frequency_cutoff=f_high)
            logging.info("Sigma integrated from %.3f to %.3fHz for %s is %.3f",
                         opts.psd_low_frequency_cutoff, f_high, ifo,
                         numpy.sqrt(sigma_squared))

            # populate IFO end time and effective distance columns
            sim_xml.ifo_time_to_column(sim, ifo, end_time)
            sim_xml.ifo_distance_to_column(sim, ifo, f_plus, f_cross)

            # include sigma in network SNR calculation
            network_snr += sigma_squared

        # distance scaling factor to get target network SNR
        network_snr = numpy.sqrt(network_snr)
        scale = network_snr / target_stat
        sim.distance = scale * sim.distance
        logging.info("Rescaled distance to %.3fMpc", sim.distance)
        for ifo in opts.instruments:
            attr_name = "eff_dist_" + ifo[0].lower()
            eff_dist = getattr(sim, attr_name)

    # append to SimInspiralTable
    sim_table.append(sim)

logging.info("Writing file")
if opts.output_file.endswith('.xml.gz'):
    # write XML file
    utils.write_filename(outdoc, opts.output_file,
                         gz=opts.output_file.endswith("gz"))
elif opts.output_file.endswith('.hdf'):
    # write HDF file
    samples.update(static_args)
    samples['approximant'] = name
    samples['phase_order'] = phase_order
    with h5py.File(opts.output_file, "w") as fp:
        for p, v in samples.items():
            fp.create_dataset(p, (1,), data=v)
else:
    raise IOError("output file must end with either '.xml.gz' or '.hdf'")

# SimInspiral
# "alpha", "alpha1", "alpha2", "alpha3", "alpha4", "alpha5", "alpha6",
# "amp_order", "bandpass", "beta",
# "coa_phase", "distance",
# "eff_dist_g", "eff_dist_h", "eff_dist_l", "eff_dist_t", "eff_dist_v",
# "end_time_gmst", "eta", "f_final", "f_lower",
# "g_end_time", "g_end_time_ns", "geocent_end_time", "geocent_end_time_ns",
# "h_end_time", "h_end_time_ns",
# "inclination", "l_end_time", "l_end_time_ns", "latitude", "longitude",
# "mass1", "mass2", "mchirp", "numrel_data", "numrel_mode_max",
# "numrel_mode_min", "phi0", "polarization", "process_id", "psi0", "psi3",
# "set_time_geocent", "simulation_id", "source", "spin1x", "spin1y",
# "spin1z", "spin2x", "spin2y", "spin2z", "t_end_time", "t_end_time_ns",
# "taper", "theta0", "v_end_time", "v_end_time_ns", "waveform"

# exit
logging.info("Done")

