[constants]
;; functions and constants
BASEDIR=/home/daniel.finstad/projects/pycbc-pisn-paper
ALIGO_ASD_FILE=${BASEDIR}/data/asd_june_2016/aLIGO_design.txt
AVIRGO_ASD_FILE=${BASEDIR}/data/asd_june_2016/AdVirgo.txt
ASD_FILES=H1:${ALIGO_ASD_FILE} L1:${ALIGO_ASD_FILE} V1:${AVIRGO_ASD_FILE}
INJECTION_TIME=1126259462
GPS_START_TIME=$((${INJECTION_TIME} - 1024))
GPS_END_TIME=$((${GPS_START_TIME} + 2048))
SEED=6789
MCHIRP_MIN=25.
MCHIRP_MAX=113.
Q_MIN=1.
Q_MAX=8.
MASS1_MIN=`python -c "from pycbc import conversions; print conversions.mass1_from_mchirp_q(${MCHIRP_MIN}, ${Q_MIN})"`
MASS1_MAX=`python -c "from pycbc import conversions; print conversions.mass1_from_mchirp_q(${MCHIRP_MAX}, ${Q_MAX})"`
MASS2_MIN=`python -c "from pycbc import conversions; print conversions.mass2_from_mchirp_q(${MCHIRP_MIN}, ${Q_MAX})"`
MASS2_MAX=`python -c "from pycbc import conversions; print conversions.mass2_from_mchirp_q(${MCHIRP_MAX}, ${Q_MIN})"`
FUNC_1="mchirp_from_mass1_mass2(mass1,mass2)<${MCHIRP_MAX}"
FUNC_2="mchirp_from_mass1_mass2(mass1,mass2)>${MCHIRP_MIN}"
FUNC_3="q_from_mass1_mass2(mass1,mass2)<${Q_MAX}"
FUNC_4="q_from_mass1_mass2(mass1,mass2)>${Q_MIN}"
FUNC_5="mass1>mass2"
FUNC_6="mass1<300./(1.+redshift(distance))"
FUNC_7="mass2<300./(1.+redshift(distance))"

[workflow]
; basic information used by the workflow generator
file-retention-level = all_triggers
h1-channel-name = H1:LOSC-STRAIN
l1-channel-name = L1:LOSC-STRAIN
v1-channel-name = V1:LOSC-STRAIN
start-time = 1126259454
end-time = 1126259470

[workflow-ifos]
; the IFOs to analyze
h1 =
l1 =
v1 =

[workflow-inference]
; how the workflow generator should setup inference nodes
num-injections = 1
data-seconds-before-trigger = 6
data-seconds-after-trigger = 2
pp-plot-parameters = mchirp "'eta_from_mass1_mass2(mass1,mass2):\$\\\eta\$'"
                     "'primary_mass(mass1,mass2):\$m_1\$'"
                     "'secondary_mass(mass1,mass2):\$m_2\$'"
                     spin1z spin2z chi_eff
                     ra dec polarization distance inclination tc
plot-group-intrinsic = "'primary_mass(mass1,mass2):\$m_1\$'"
                     "'secondary_mass(mass1,mass2):\$m_2\$'"
                     spin1z spin2z chi_eff
plot-group-extrinsic = ra dec polarization distance inclination tc
plot-group-extrinsic = distance tc
plot-group-masses = "'primary_mass(mass1,mass2):\$m_1\$'"
                    "'secondary_mass(mass1,mass2):\$m_2\$'" mchirp q
                    "'eta_from_mass1_mass2(mass1,mass2):\$\\\eta\$'"
plot-group-spins = spin1z spin2z chi_eff


[executables]
; paths to executables to use in workflow
create_injections = ${which:pycbc_pisn_inspinj}
inference = ${which:run_pycbc_inference}
inference_intervals = ${which:pycbc_inference_plot_inj_intervals}
inference_posterior = ${which:pycbc_inference_plot_posterior}
inference_rate = ${which:pycbc_inference_plot_acceptance_rate}
inference_recovery = ${which:pycbc_inference_plot_inj_recovery}
inference_samples = ${which:pycbc_inference_plot_samples}
inference_table = ${which:pycbc_inference_table_summary}
results_page = ${which:pycbc_make_html_page}

[datafind]
; datafind options
urltype = file

[create_injections]
; command line options use --help for more information
verbose =
fake-strain-from-file = ${constants|ASD_FILES}
asd-file = ${constants|ASD_FILES}
seed = ${constants|SEED}
fake-strain-seed = 0
channel-name = H1:H1:FAKE L1:L1:FAKE V1:V1:FAKE
sample-rate = 4096
low-frequency-cutoff = 10
psd-low-frequency-cutoff = 10
psd-high-frequency-cutoff = 2048
instruments = H1 L1 V1
ninjections = 1
config-file = ${constants|BASEDIR}/run/inspinj_base.ini
injection-config-file = ${constants|BASEDIR}/run/inspinj_base.ini
config-overrides = static_args:tc:${constants|INJECTION_TIME} prior-mass1:min-mass1:${constants|MASS1_MIN} prior-mass1:max-mass1:${constants|MASS1_MAX} prior-mass2:min-mass2:${constants|MASS2_MIN} prior-mass2:max-mass2:${constants|MASS2_MAX} constraint-1:constraint_arg:${constants|FUNC_1} constraint-2:constraint_arg:${constants|FUNC_2} constraint-3:constraint_arg:${constants|FUNC_3} constraint-4:constraint_arg:${constants|FUNC_4} constraint-5:constraint_arg:${constants|FUNC_5} constraint-6:constraint_arg:${constants|FUNC_6} constraint-7:constraint_arg:${constants|FUNC_7}
gps-start-time = ${constants|GPS_START_TIME}
gps-end-time = ${constants|GPS_END_TIME}

[inference]
; command line options use --help for more information
processing-scheme = mkl
nprocesses = 4
fake-strain-from-file = ${constants|ASD_FILES}
asd-file = ${constants|ASD_FILES}
fake-strain-seed = 0
pad-data = 8
strain-high-pass = 5
sample-rate = 2048
low-frequency-cutoff = 10
verbose =
force =
save-backup =
inj-seed = ${constants|SEED}

[pegasus_profile-inference]
; pegasus profile for inference nodes
condor|request_memory = 1G
condor|request_cpus = 4
;condor|requirements = TARGET.CpuModelNumber == 44
dagman|retry = 4

[inference_intervals]
; command line options use --help for more information

[inference_posterior]
; command line options use --help for more information
plot-scatter =
plot-contours =
plot-marginal =
z-arg = "'sqrt(2.*loglr):\$\\\rho(\\\theta)\$'"
plot-injection-parameters =

[inference_rate]
; command line options use --help for more information

[inference_recovery]
; command line options use --help for more information

[inference_samples]
; command line options use --help for more information

[inference_table]
; command line options use --help for more information

[results_page]
; command line options use --help for more information
analysis-title = "emcee_pt, 200 walkers, 20 temps, 8000 independent samples"
